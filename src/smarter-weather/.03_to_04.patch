diff --git a/checkpoint_03/weather.js b/checkpoint_04/weather.js
index 9544af9..07dd3ca 100644
--- a/checkpoint_03/weather.js
+++ b/checkpoint_04/weather.js
@@ -1,26 +1,48 @@
 import React, { Component } from "react";
 
-import { StyleSheet, Text, View, TextInput, Image } from "react-native";
+import {
+  AsyncStorage,
+  StyleSheet,
+  Text,
+  View,
+  TextInput,
+  Image
+} from "react-native";
 
 import Forecast from "./forecast";
 import OpenWeatherMap from "./open_weather_map";
 
+const STORAGE_KEY = "@SmarterWeather:zip";
+
 class WeatherProject extends Component {
   constructor(props) {
     super(props);
     this.state = { zip: "", forecast: null };
-    this._fetchLocation();
+
+    // If a previous zip code exists, load that.
+    // Otherwise, fetch the user's current location.
+    this._loadZipCode().then(zip => {
+      if (zip !== null) {
+        this.state.zip = zip;
+        this._getForecastForZip(zip);
+      } else {
+        this._fetchLocation();
+      }
+    });
   }
 
+  _loadZipCode = () => {
+    return AsyncStorage
+      .getItem(STORAGE_KEY)
+      .catch(error => console.error("AsyncStorage error: " + error.message));
+  };
+
   _fetchLocation = () => {
     navigator.geolocation.getCurrentPosition(
       initialPosition => {
         let lat = initialPosition.coords.latitude;
         let long = initialPosition.coords.longitude;
-
-        OpenWeatherMap.fetchLatLonForecast(lat, long).then(forecast => {
-          this.setState({ forecast: forecast });
-        });
+        this._getForecastForLocation(lat, long);
       },
       error => {
         alert(error.message);
@@ -29,13 +51,29 @@ class WeatherProject extends Component {
     );
   };
 
-  _handleTextChange = event => {
-    let zip = event.nativeEvent.text;
+  _getForecastForLocation = (lat, long) => {
+    OpenWeatherMap.fetchLatLonForecast(lat, long).then(forecast => {
+      this.setState({ forecast: forecast });
+    });
+  };
+
+  _getForecastForZip = zip => {
+    // Store zip code
+    AsyncStorage
+      .setItem(STORAGE_KEY, zip)
+      .then(() => console.log("Saved selection to disk: " + zip))
+      .catch(error => console.error("AsyncStorage error: " + error.message));
+
     OpenWeatherMap.fetchZipForecast(zip).then(forecast => {
       this.setState({ forecast: forecast });
     });
   };
 
+  _handleTextChange = event => {
+    let zip = event.nativeEvent.text;
+    this._getForecastForZip(zip);
+  };
+
   render() {
     let content = null;
     if (this.state.forecast !== null) {
@@ -64,6 +102,7 @@ class WeatherProject extends Component {
                   style={[styles.zipCode, styles.mainText]}
                   onSubmitEditing={this._handleTextChange}
                   underlineColorAndroid="transparent"
+                  defaultValue={this.state.zip}
                 />
               </View>
             </View>
